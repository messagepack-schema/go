package test_files

import "github.com/messagepack-schema/go/runtime"
import "github.com/messagepack-schema/go/runtime/msgpack"
import "bytes"

type MapTest struct {
	A1  map[string]bool
	A2  map[string]string
	A3  map[string]uint8
	A4  map[string]uint16
	A5  map[string]uint32
	A6  map[string]uint64
	A7  map[string]int8
	A8  map[string]int16
	A9  map[string]int32
	A10 map[string]int64
	A11 map[string]float32
	A12 map[string]float64
	B1  map[uint8]bool
	B2  map[uint8]string
	B3  map[uint8]uint8
	B4  map[uint8]uint16
	B5  map[uint8]uint32
	B6  map[uint8]uint64
	B7  map[uint8]int8
	B8  map[uint8]int16
	B9  map[uint8]int32
	B10 map[uint8]int64
	B11 map[uint8]float32
	B12 map[uint8]float64
	C1  map[uint16]bool
	C2  map[uint16]string
	C3  map[uint16]uint8
	C4  map[uint16]uint16
	C5  map[uint16]uint32
	C6  map[uint16]uint64
	C7  map[uint16]int8
	C8  map[uint16]int16
	C9  map[uint16]int32
	C10 map[uint16]int64
	C11 map[uint16]float32
	C12 map[uint16]float64
	D1  map[uint32]bool
	D2  map[uint32]string
	D3  map[uint32]uint8
	D4  map[uint32]uint16
	D5  map[uint32]uint32
	D6  map[uint32]uint64
	D7  map[uint32]int8
	D8  map[uint32]int16
	D9  map[uint32]int32
	D10 map[uint32]int64
	D11 map[uint32]float32
	D12 map[uint32]float64
	E1  map[uint64]bool
	E2  map[uint64]string
	E3  map[uint64]uint8
	E4  map[uint64]uint16
	E5  map[uint64]uint32
	E6  map[uint64]uint64
	E7  map[uint64]int8
	E8  map[uint64]int16
	E9  map[uint64]int32
	E10 map[uint64]int64
	E11 map[uint64]float32
	E12 map[uint64]float64
	F1  map[int8]bool
	F2  map[int8]string
	F3  map[int8]uint8
	F4  map[int8]uint16
	F5  map[int8]uint32
	F6  map[int8]uint64
	F7  map[int8]int8
	F8  map[int8]int16
	F9  map[int8]int32
	F10 map[int8]int64
	F11 map[int8]float32
	F12 map[int8]float64
	G1  map[int16]bool
	G2  map[int16]string
	G3  map[int16]uint8
	G4  map[int16]uint16
	G5  map[int16]uint32
	G6  map[int16]uint64
	G7  map[int16]int8
	G8  map[int16]int16
	G9  map[int16]int32
	G10 map[int16]int64
	G11 map[int16]float32
	G12 map[int16]float64
	H1  map[int32]bool
	H2  map[int32]string
	H3  map[int32]uint8
	H4  map[int32]uint16
	H5  map[int32]uint32
	H6  map[int32]uint64
	H7  map[int32]int8
	H8  map[int32]int16
	H9  map[int32]int32
	H10 map[int32]int64
	H11 map[int32]float32
	H12 map[int32]float64
	I1  map[int64]bool
	I2  map[int64]string
	I3  map[int64]uint8
	I4  map[int64]uint16
	I5  map[int64]uint32
	I6  map[int64]uint64
	I7  map[int64]int8
	I8  map[int64]int16
	I9  map[int64]int32
	I10 map[int64]int64
	I11 map[int64]float32
	I12 map[int64]float64
	J1  map[float32]bool
	J2  map[float32]string
	J3  map[float32]uint8
	J4  map[float32]uint16
	J5  map[float32]uint32
	J6  map[float32]uint64
	J7  map[float32]int8
	J8  map[float32]int16
	J9  map[float32]int32
	J10 map[float32]int64
	J11 map[float32]float32
	J12 map[float32]float64
	K1  map[float64]bool
	K2  map[float64]string
	K3  map[float64]uint8
	K4  map[float64]uint16
	K5  map[float64]uint32
	K6  map[float64]uint64
	K7  map[float64]int8
	K8  map[float64]int16
	K9  map[float64]int32
	K10 map[float64]int64
	K11 map[float64]float32
	K12 map[float64]float64
}

func (u *MapTest) Serialize() ([]byte, error) {
	buf := new(bytes.Buffer)
	writer := msgpack.NewEncoder(buf)
	var err error

	return buf.Bytes(), nil
}
